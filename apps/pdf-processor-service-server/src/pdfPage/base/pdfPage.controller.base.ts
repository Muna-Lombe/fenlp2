/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PdfPageService } from "../pdfPage.service";
import { PdfPageCreateInput } from "./PdfPageCreateInput";
import { PdfPage } from "./PdfPage";
import { PdfPageFindManyArgs } from "./PdfPageFindManyArgs";
import { PdfPageWhereUniqueInput } from "./PdfPageWhereUniqueInput";
import { PdfPageUpdateInput } from "./PdfPageUpdateInput";
import { PdfPageUpdatePascalInput } from "../PdfPageUpdatePascalInput";

export class PdfPageControllerBase {
  constructor(protected readonly service: PdfPageService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PdfPage })
  async createPdfPage(
    @common.Body() data: PdfPageCreateInput
  ): Promise<PdfPage> {
    return await this.service.createPdfPage({
      data: {
        ...data,

        pdfFile: data.pdfFile
          ? {
              connect: data.pdfFile,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        pageId: true,
        processingMethod: true,
        includesText: true,
        includesTables: true,
        includesImages: true,

        pdfFile: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PdfPage] })
  @ApiNestedQuery(PdfPageFindManyArgs)
  async pdfPages(@common.Req() request: Request): Promise<PdfPage[]> {
    const args = plainToClass(PdfPageFindManyArgs, request.query);
    return this.service.pdfPages({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        pageId: true,
        processingMethod: true,
        includesText: true,
        includesTables: true,
        includesImages: true,

        pdfFile: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PdfPage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async pdfPage(
    @common.Param() params: PdfPageWhereUniqueInput
  ): Promise<PdfPage | null> {
    const result = await this.service.pdfPage({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        pageId: true,
        processingMethod: true,
        includesText: true,
        includesTables: true,
        includesImages: true,

        pdfFile: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PdfPage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePdfPage(
    @common.Param() params: PdfPageWhereUniqueInput,
    @common.Body() data: PdfPageUpdateInput
  ): Promise<PdfPage | null> {
    try {
      return await this.service.updatePdfPage({
        where: params,
        data: {
          ...data,

          pdfFile: data.pdfFile
            ? {
                connect: data.pdfFile,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          pageId: true,
          processingMethod: true,
          includesText: true,
          includesTables: true,
          includesImages: true,

          pdfFile: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PdfPage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePdfPage(
    @common.Param() params: PdfPageWhereUniqueInput
  ): Promise<PdfPage | null> {
    try {
      return await this.service.deletePdfPage({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          pageId: true,
          processingMethod: true,
          includesText: true,
          includesTables: true,
          includesImages: true,

          pdfFile: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Post("/pdf-page")
  @swagger.ApiOkResponse({
    type: PdfPageCreateInput,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async AddPdfPage(
    @common.Body()
    body: PdfPageUpdatePascalInput
  ): Promise<PdfPageCreateInput> {
    return this.service.AddPdfPage(body);
  }

  @common.Delete("/pdf-page/:id")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async DeletePdfPage(
    @common.Body()
    body: PdfPageUpdatePascalInput
  ): Promise<string> {
    return this.service.DeletePdfPage(body);
  }

  @common.Put("/pdf-page/:id")
  @swagger.ApiOkResponse({
    type: PdfPageUpdateInput,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async UpdatePdfPage(
    @common.Body()
    body: PdfPageUpdatePascalInput
  ): Promise<PdfPageUpdateInput> {
    return this.service.UpdatePdfPage(body);
  }

  @common.Put("/pdf-page-pascal/:id")
  @swagger.ApiOkResponse({
    type: PdfPage,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async UpdatePdfPageWithPascalCase(
    @common.Body()
    body: PdfPageUpdatePascalInput
  ): Promise<PdfPage> {
    return this.service.UpdatePdfPageWithPascalCase(body);
  }
}
