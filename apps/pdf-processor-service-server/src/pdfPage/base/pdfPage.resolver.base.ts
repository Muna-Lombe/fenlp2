/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PdfPage } from "./PdfPage";
import { PdfPageCountArgs } from "./PdfPageCountArgs";
import { PdfPageFindManyArgs } from "./PdfPageFindManyArgs";
import { PdfPageFindUniqueArgs } from "./PdfPageFindUniqueArgs";
import { CreatePdfPageArgs } from "./CreatePdfPageArgs";
import { UpdatePdfPageArgs } from "./UpdatePdfPageArgs";
import { DeletePdfPageArgs } from "./DeletePdfPageArgs";
import { PdfFile } from "../../pdfFile/base/PdfFile";
import { PdfPageCreateInput } from "./PdfPageCreateInput";
import { PdfPageUpdateInput } from "./PdfPageUpdateInput";
import { PdfPageUpdatePascalInput } from "../PdfPageUpdatePascalInput";
import { PdfPageService } from "../pdfPage.service";
@graphql.Resolver(() => PdfPage)
export class PdfPageResolverBase {
  constructor(protected readonly service: PdfPageService) {}

  async _pdfPagesMeta(
    @graphql.Args() args: PdfPageCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PdfPage])
  async pdfPages(
    @graphql.Args() args: PdfPageFindManyArgs
  ): Promise<PdfPage[]> {
    return this.service.pdfPages(args);
  }

  @graphql.Query(() => PdfPage, { nullable: true })
  async pdfPage(
    @graphql.Args() args: PdfPageFindUniqueArgs
  ): Promise<PdfPage | null> {
    const result = await this.service.pdfPage(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PdfPage)
  async createPdfPage(
    @graphql.Args() args: CreatePdfPageArgs
  ): Promise<PdfPage> {
    return await this.service.createPdfPage({
      ...args,
      data: {
        ...args.data,

        pdfFile: args.data.pdfFile
          ? {
              connect: args.data.pdfFile,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => PdfPage)
  async updatePdfPage(
    @graphql.Args() args: UpdatePdfPageArgs
  ): Promise<PdfPage | null> {
    try {
      return await this.service.updatePdfPage({
        ...args,
        data: {
          ...args.data,

          pdfFile: args.data.pdfFile
            ? {
                connect: args.data.pdfFile,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PdfPage)
  async deletePdfPage(
    @graphql.Args() args: DeletePdfPageArgs
  ): Promise<PdfPage | null> {
    try {
      return await this.service.deletePdfPage(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => PdfFile, {
    nullable: true,
    name: "pdfFile",
  })
  async getPdfFile(@graphql.Parent() parent: PdfPage): Promise<PdfFile | null> {
    const result = await this.service.getPdfFile(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PdfPageCreateInput)
  async AddPdfPage(
    @graphql.Args()
    args: PdfPageCreateInput
  ): Promise<PdfPageCreateInput> {
    return this.service.AddPdfPage(args);
  }

  @graphql.Mutation(() => String)
  async DeletePdfPage(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.DeletePdfPage(args);
  }

  @graphql.Mutation(() => PdfPageUpdateInput)
  async UpdatePdfPage(
    @graphql.Args()
    args: PdfPageUpdateInput
  ): Promise<PdfPageUpdateInput> {
    return this.service.UpdatePdfPage(args);
  }

  @graphql.Mutation(() => PdfPage)
  async UpdatePdfPageWithPascalCase(
    @graphql.Args()
    args: PdfPageUpdatePascalInput
  ): Promise<PdfPage> {
    return this.service.UpdatePdfPageWithPascalCase(args);
  }
}
