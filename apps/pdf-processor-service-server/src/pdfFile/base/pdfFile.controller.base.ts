/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PdfFileService } from "../pdfFile.service";
import { PdfFileCreateInput } from "./PdfFileCreateInput";
import { PdfFile } from "./PdfFile";
import { PdfFileFindManyArgs } from "./PdfFileFindManyArgs";
import { PdfFileWhereUniqueInput } from "./PdfFileWhereUniqueInput";
import { PdfFileUpdateInput } from "./PdfFileUpdateInput";
import { PdfPageFindManyArgs } from "../../pdfPage/base/PdfPageFindManyArgs";
import { PdfPage } from "../../pdfPage/base/PdfPage";
import { PdfPageWhereUniqueInput } from "../../pdfPage/base/PdfPageWhereUniqueInput";
import { PdfFileUpdatePascalInput } from "../PdfFileUpdatePascalInput";

export class PdfFileControllerBase {
  constructor(protected readonly service: PdfFileService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PdfFile })
  async createPdfFile(
    @common.Body() data: PdfFileCreateInput
  ): Promise<PdfFile> {
    return await this.service.createPdfFile({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        filename: true,
        pageCount: true,
        fileData: true,
        storageUrl: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PdfFile] })
  @ApiNestedQuery(PdfFileFindManyArgs)
  async pdfFiles(@common.Req() request: Request): Promise<PdfFile[]> {
    const args = plainToClass(PdfFileFindManyArgs, request.query);
    return this.service.pdfFiles({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        filename: true,
        pageCount: true,
        fileData: true,
        storageUrl: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PdfFile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async pdfFile(
    @common.Param() params: PdfFileWhereUniqueInput
  ): Promise<PdfFile | null> {
    const result = await this.service.pdfFile({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        filename: true,
        pageCount: true,
        fileData: true,
        storageUrl: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PdfFile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePdfFile(
    @common.Param() params: PdfFileWhereUniqueInput,
    @common.Body() data: PdfFileUpdateInput
  ): Promise<PdfFile | null> {
    try {
      return await this.service.updatePdfFile({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          filename: true,
          pageCount: true,
          fileData: true,
          storageUrl: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PdfFile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePdfFile(
    @common.Param() params: PdfFileWhereUniqueInput
  ): Promise<PdfFile | null> {
    try {
      return await this.service.deletePdfFile({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          filename: true,
          pageCount: true,
          fileData: true,
          storageUrl: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/pdfPages")
  @ApiNestedQuery(PdfPageFindManyArgs)
  async findPdfPages(
    @common.Req() request: Request,
    @common.Param() params: PdfFileWhereUniqueInput
  ): Promise<PdfPage[]> {
    const query = plainToClass(PdfPageFindManyArgs, request.query);
    const results = await this.service.findPdfPages(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        pageId: true,
        processingMethod: true,
        includesText: true,
        includesTables: true,
        includesImages: true,

        pdfFile: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/pdfPages")
  async connectPdfPages(
    @common.Param() params: PdfFileWhereUniqueInput,
    @common.Body() body: PdfPageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pdfPages: {
        connect: body,
      },
    };
    await this.service.updatePdfFile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/pdfPages")
  async updatePdfPages(
    @common.Param() params: PdfFileWhereUniqueInput,
    @common.Body() body: PdfPageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pdfPages: {
        set: body,
      },
    };
    await this.service.updatePdfFile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/pdfPages")
  async disconnectPdfPages(
    @common.Param() params: PdfFileWhereUniqueInput,
    @common.Body() body: PdfPageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pdfPages: {
        disconnect: body,
      },
    };
    await this.service.updatePdfFile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Post("/pdf-file")
  @swagger.ApiOkResponse({
    type: PdfFileCreateInput,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async AddPdfFile(
    @common.Body()
    body: PdfFileUpdatePascalInput
  ): Promise<PdfFileCreateInput> {
    return this.service.AddPdfFile(body);
  }

  @common.Delete("/pdf-file/:id")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async DeletePdfFile(
    @common.Body()
    body: PdfFileUpdatePascalInput
  ): Promise<string> {
    return this.service.DeletePdfFile(body);
  }

  @common.Put("/pdf-file/:id")
  @swagger.ApiOkResponse({
    type: PdfFileUpdateInput,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async UpdatePdfFile(
    @common.Body()
    body: PdfFileUpdatePascalInput
  ): Promise<PdfFileUpdateInput> {
    return this.service.UpdatePdfFile(body);
  }

  @common.Put("/pdf-file-pascal/:id")
  @swagger.ApiOkResponse({
    type: PdfFileUpdateInput,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async UpdatePdfFilePascalCase(
    @common.Body()
    body: PdfFileUpdatePascalInput
  ): Promise<PdfFileUpdateInput> {
    return this.service.UpdatePdfFilePascalCase(body);
  }

  @common.Put("/pdf-file-pascal/:id")
  @swagger.ApiOkResponse({
    type: PdfFile,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async UpdatePdfFileWithPascalCase(
    @common.Body()
    body: PdfFileUpdatePascalInput
  ): Promise<PdfFile> {
    return this.service.UpdatePdfFileWithPascalCase(body);
  }
}
